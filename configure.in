#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT()
AC_CONFIG_SRCDIR([ap_mrb_init.h])
AC_CONFIG_HEADER(config.h)

# Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET

# Checks for libraries.
# FIXME: Replace `main' with a function in `-lm':
AC_CHECK_LIB([m], [main])
AC_CHECK_LIB([crypto], [main])

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([string.h unistd.h],,[AC_MSG_ERROR(not found the header file for mod_mruby.)])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

# Checks for library functions.
AC_FUNC_STAT
AC_CHECK_FUNCS([memset putenv strtol])

# Checks for apache tools.
AC_ARG_WITH(apxs, AC_HELP_STRING([--with-apxs=FILE],
    [pathname to the Apache apxs tool [[apxs]]]),
    [APXS_PATH="$with_apxs"])
if test -z "${APXS_PATH}"; then
    AC_PATH_PROGS(APXS_PATH, apxs2 apxs, no,
        /usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/apache/bin:/usr/local/apache2/bin)
fi
if test "$APXS_PATH" = no; then
    AC_MSG_ERROR([apxs2 and apsx not found.])
fi

AC_ARG_WITH(apachectl, AC_HELP_STRING([--with-apachectl=FILE],
    [pathname to the Apache apachectl tool [[apachectl]]]),
    [APACHECTL_PATH="$with_apachectl"])
if test -z "${APACHECTL_PATH}"; then
    AC_PATH_PROGS(APACHECTL_PATH, apache2ctl apachectl, no,
        /usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/apache/bin:/usr/local/apache2/bin)
fi
if test "$APACHECTL_PATH" = no; then
    AC_MSG_ERROR([apache2ctl and apachectl not found.])
fi

APACHE_VERSION=`$APACHECTL_PATH -v | awk "/Server version/ {print $ 3}"`
NEED_DEFINE_VERSITON="Apache/2.4.*"

case $APACHE_VERSION in
    $NEED_DEFINE_VERSITON) 
        AC_DEFINE([__APACHE24__], [1], [apache 2.4 support])
        echo "checking for apache version... $APACHE_VERSION set VERSION_DEF=$VERSION_DEF"
    ;;
    *)
        echo "checking for apache version... $APACHE_VERSION"
    ;;
esac

AC_ARG_ENABLE([redis],
    [AS_HELP_STRING([--enable-redis],
        [redis feature (default is no)])],
    [AC_CHECK_HEADERS([hiredis/hiredis.h],,[AC_MSG_ERROR(not found the header file for redis.)])
     AC_CHECK_LIB([hiredis], [main])
    ],
    [enable_redis=no] 
)

AS_IF([test "x$enable_redis" != xno],
    [AC_DEFINE([ENABLE_REDIS], [1], [redis support])
     FEATURE_TARGETS="lib/redis/*.c ${FEATURE_TARGETS}"
    ]
)

AC_ARG_ENABLE([hello],
    [AS_HELP_STRING([--enable-hello],
        [hello feature (default is no)])],
    [],
    [enable_hello=no] 
)

AS_IF([test "x$enable_hello" != xno],
    [AC_DEFINE([ENABLE_HELLO], [1], [hello support])
     FEATURE_TARGETS="lib/hello/*.c ${FEATURE_TARGETS}"
    ]
)

WLFLAG="-Wl,`echo "$LIBS" | sed -e "s/\s\+/,/g"`"
LDFLAGS="$WLFLAG $LDFLAGS"
AC_SUBST(FEATURE_TARGETS)

AC_CONFIG_FILES([Makefile])
AC_OUTPUT
